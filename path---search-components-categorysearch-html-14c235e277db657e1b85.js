webpackJsonp([73887481964516],{497:function(n,s){n.exports={data:{markdownRemark:{html:'<p><img src="https://i.imgur.com/IsmEuyr.png" alt="Image to be displayed"></p>\n<p><code class="gatsby-code-text">CategorySearch</code> creates a category based data search UI component with an autosuggest functionality. It is used for applying full-text search across one or more fields.</p>\n<p>Example uses:</p>\n<ul>\n<li>Searching for a rental listing by its <code class="gatsby-code-text">name</code> or <code class="gatsby-code-text">description</code> field.</li>\n<li>Creating an e-commerce search box for finding products by their listing properties.</li>\n</ul>\n<h2 id="usage"><a href="#usage" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>\n<h3 id="basic-usage"><a href="#basic-usage" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic Usage</h3>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CategorySearch</span>\n  <span class="token attr-name">componentId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SearchSensor<span class="token punctuation">"</span></span>\n  <span class="token attr-name">dataField</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">"group_venue"</span><span class="token punctuation">,</span> <span class="token string">"group_city"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">categoryField</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>group_topics<span class="token punctuation">"</span></span>\n<span class="token punctuation">/></span></span></code></pre>\n      </div>\n<h3 id="usage-with-all-props"><a href="#usage-with-all-props" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage With All Props</h3>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CategorySearch</span>\n  <span class="token attr-name">componentId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SearchSensor<span class="token punctuation">"</span></span>\n  <span class="token attr-name">dataField</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">"group_venue"</span><span class="token punctuation">,</span> <span class="token string">"group_city"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">categoryField</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>group_topics<span class="token punctuation">"</span></span>\n  <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Search<span class="token punctuation">"</span></span>\n  <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n      term<span class="token punctuation">:</span> <span class="token string">\'Paris\'</span><span class="token punctuation">,</span>\n      category<span class="token punctuation">:</span> <span class="token string">\'*\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">fieldWeights</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Search for cities or venues<span class="token punctuation">"</span></span>\n  <span class="token attr-name">autoSuggest</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">defaultSuggestions</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token punctuation">{</span>label<span class="token punctuation">:</span> <span class="token string">"Programming"</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">"Programming"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">highlight</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">highlightField</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>group_city<span class="token punctuation">"</span></span>\n  <span class="token attr-name">queryFormat</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>or<span class="token punctuation">"</span></span>\n  <span class="token attr-name">fuzziness</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">debounce</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">react</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    and<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"CategoryFilter"</span><span class="token punctuation">,</span> <span class="token string">"SearchFilter"</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">showFilter</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">filterLabel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Venue filter<span class="token punctuation">"</span></span>\n  <span class="token attr-name">URLParams</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span></code></pre>\n      </div>\n<h2 id="props"><a href="#props" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Props</h2>\n<ul>\n<li><strong>componentId</strong> <code class="gatsby-code-text">String</code>\nunique identifier of the component, can be referenced in other components’ <code class="gatsby-code-text">react</code> prop.</li>\n<li><strong>dataField</strong> <code class="gatsby-code-text">String or Array</code>\ndata field(s) on which the search query will be applied to. If you want to search across multiple fields, pass them as an <code class="gatsby-code-text">Array</code>.</li>\n<li><strong>nestedField</strong> <code class="gatsby-code-text">String</code> [optional]\nuse to set the <code class="gatsby-code-text">nested</code>  mapping field that allows arrays of objects to be indexed in a way that they can be queried independently of each other. Applicable only when dataField is a part of <code class="gatsby-code-text">nested</code> type.</li>\n<li><strong>categoryField</strong> <code class="gatsby-code-text">String</code> [optional]\ndata field which has the category values mapped.</li>\n<li><strong>title</strong> <code class="gatsby-code-text">String or JSX</code> [optional]\nSets the title of the component to be shown in the UI.</li>\n<li><strong>defaultValue</strong> <code class="gatsby-code-text">Object</code> [optional]\nset the initial search query text on mount &#x26; the category.</li>\n<li>\n<p><strong>value</strong> <code class="gatsby-code-text">Object</code> [optional]\ncontrols the current value of the component. It sets the search query text &#x26; the category (on mount and on update). Use this prop in conjunction with <code class="gatsby-code-text">onChange</code> function. Usage:</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CategorySearch</span>\n    <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">searchProps</span><span class="token punctuation">}</span></span>\n    <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n        term<span class="token punctuation">:</span> <span class="token string">\'Harry\'</span><span class="token punctuation">,</span>\n        category<span class="token punctuation">:</span> <span class="token string">\'*\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span></code></pre>\n      </div>\n</li>\n<li>\n<p><strong>onChange</strong> <code class="gatsby-code-text">function</code> [optional]\nis a callback function which accepts component’s current <strong>value</strong> as a parameter. It is called when you are using the <code class="gatsby-code-text">value</code> prop and the component’s value changes. This prop is used to implement the <a href="https://reactjs.org/docs/forms.html#controlled-components">controlled component</a> behavior.</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CategorySearch</span>\n\t<span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span>\n\t<span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> triggerQuery<span class="token punctuation">,</span> event<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t\t\tvalue<span class="token punctuation">,</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">triggerQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span></code></pre>\n      </div>\n<blockquote>\n<p>Note:</p>\n<p>If you’re using the controlled behavior than it’s your responsibility to call the <code class="gatsby-code-text">triggerQuery</code> method to update the query i.e execute the search query and update the query results in connected components by <code class="gatsby-code-text">react</code> prop. It is not mandatory to call the <code class="gatsby-code-text">triggerQuery</code> in <code class="gatsby-code-text">onChange</code> you can also call it in other input handlers like <code class="gatsby-code-text">onBlur</code> or <code class="gatsby-code-text">onKeyPress</code>.</p>\n</blockquote>\n</li>\n<li><strong>downShiftProps</strong> <code class="gatsby-code-text">Object</code> [optional]\nallow passing props directly to <code class="gatsby-code-text">Downshift</code> component. You can read more about Downshift props <a href="https://github.com/paypal/downshift#--downshift-------">here</a>.</li>\n<li><strong>fieldWeights</strong> <code class="gatsby-code-text">Array</code> [optional]\nset the search weight for the database fields, useful when dataField is an Array of more than one field. This prop accepts an array of numbers. A higher number implies a higher relevance weight for the corresponding field in the search results.</li>\n<li><strong>placeholder</strong> <code class="gatsby-code-text">String</code> [optional]\nSets the placeholder text to be shown in the searhbox input field. Defaults to “Search”.</li>\n<li><strong>showIcon</strong> <code class="gatsby-code-text">Boolean</code> [optional]\nwhether to display a search or custom icon in the input box. Defaults to <code class="gatsby-code-text">true</code>.</li>\n<li><strong>iconPosition</strong> <code class="gatsby-code-text">String</code> [optional]\nsets the position of the search icon. Can be <code class="gatsby-code-text">left</code> or <code class="gatsby-code-text">right</code>. Defaults to <code class="gatsby-code-text">right</code>.</li>\n<li><strong>icon</strong> <code class="gatsby-code-text">JSX</code> [optional]\ndisplays a custom search icon instead of the default 🔍</li>\n<li><strong>showClear</strong> <code class="gatsby-code-text">Boolean</code> [optional]\nshow a clear text icon. Defaults to <code class="gatsby-code-text">false</code>.</li>\n<li><strong>clearIcon</strong> <code class="gatsby-code-text">JSX</code> [optional]\nallows setting a custom icon for clearing text instead of the default cross.</li>\n<li><strong>autosuggest</strong> <code class="gatsby-code-text">Boolean</code> [optional]\nset whether the autosuggest functionality should be enabled or disabled. Defaults to <code class="gatsby-code-text">true</code>.</li>\n<li><strong>strictSelection</strong> <code class="gatsby-code-text">Boolean</code> [optional]\ndefaults to <code class="gatsby-code-text">false</code>. When set to <code class="gatsby-code-text">true</code> the component will only set its value and fire the query if the value was selected from the suggestion. Otherwise the value will be cleared on selection. This is only relevant with <code class="gatsby-code-text">autosuggest</code>.</li>\n<li><strong>defaultSuggestions</strong> <code class="gatsby-code-text">Array</code> [optional]\npreset search suggestions to be shown on focus when the search box does not have any search query text set. Accepts an array of objects each having a <strong>label</strong> and <strong>value</strong> property. The label can contain either String or an HTML element.</li>\n<li><strong>debounce</strong> <code class="gatsby-code-text">Number</code> [optional]\nsets the milliseconds to wait before executing the query. Defaults to <code class="gatsby-code-text">0</code>, i.e. no debounce.</li>\n<li><strong>highlight</strong> <code class="gatsby-code-text">Boolean</code> [optional]\nWhether highlighting should be enabled in the returned results. Defaults to <code class="gatsby-code-text">false</code>.</li>\n<li><strong>highlightField</strong> <code class="gatsby-code-text">String</code> or <code class="gatsby-code-text">Array</code> [optional]\nWhen highlighting is enabled, this prop allows specifying the fields which should be returned with the matching highlights. When not specified, it defaults to applying highlights on the field(s) specified in the <strong>dataField</strong> prop.</li>\n<li><strong>customHighlight</strong> <code class="gatsby-code-text">Function</code> [optional]\na function which returns the custom <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html">highlight settings</a>. It receives the <code class="gatsby-code-text">props</code> and expects you to return an object with the <code class="gatsby-code-text">highlight</code> key. Check out the <a href="https://opensource.appbase.io/reactivesearch/demos/technews/" target="_blank">technews demo</a> where the <code class="gatsby-code-text">DataSearch</code> component uses a <code class="gatsby-code-text">customHighlight</code> as given below,</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token operator">&lt;</span>CategorySearch\n    componentId<span class="token operator">=</span><span class="token string">"title"</span>\n    dataField<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">\'title\'</span><span class="token punctuation">,</span> <span class="token string">\'text\'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>\n    highlight\n    customHighlight<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        highlight<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            pre_tags<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'&lt;mark>\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n            post_tags<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'&lt;/mark>\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n            fields<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                text<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                title<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            number_of_fragments<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n<span class="token operator">/</span><span class="token operator">></span></code></pre>\n      </div>\n<ul>\n<li>\n<p><strong>queryFormat</strong> <code class="gatsby-code-text">String</code> [optional]\nSets the query format, can be <strong>or</strong> or <strong>and</strong>. Defaults to <strong>or</strong>.</p>\n<ul>\n<li><strong>or</strong> returns all the results matching <strong>any</strong> of the search query text’s parameters. For example, searching for “bat man” with <strong>or</strong> will return all the results matching either “bat” or “man”.</li>\n<li>On the other hand with <strong>and</strong>, only results matching both “bat” and “man” will be returned. It returns the results matching <strong>all</strong> of the search query text’s parameters.</li>\n</ul>\n</li>\n<li><strong>fuzziness</strong> <code class="gatsby-code-text">String or Number</code> [optional]\nSets a maximum edit distance on the search parameters, can be <strong>0</strong>, <strong>1</strong>, <strong>2</strong> or <strong>“AUTO”</strong>. Useful for showing the correct results for an incorrect search parameter by taking the fuzziness into account. For example, with a substitution of one character, <strong>fox</strong> can become <strong>box</strong>. Read more about it in the elastic search <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/fuzziness.html">docs</a>.</li>\n<li><strong>showFilter</strong> <code class="gatsby-code-text">Boolean</code> [optional]\nshow as filter when a value is selected in a global selected filters view. Defaults to <code class="gatsby-code-text">true</code>.</li>\n<li><strong>showVoiceSearch</strong> <code class="gatsby-code-text">Boolean</code> [optional]\nshow an option in search bar to enable the voice to text search. Defaults to <code class="gatsby-code-text">false</code>.</li>\n<li><strong>searchOperators</strong> <code class="gatsby-code-text">Boolean</code> [optional]\nDefaults to <code class="gatsby-code-text">false</code>, if set to <code class="gatsby-code-text">true</code> than you can use special characters in the search query to enable the advanced search.<br/>\nRead more about it <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-simple-query-string-query.html">here</a>.</li>\n<li><strong>filterLabel</strong> <code class="gatsby-code-text">String</code> [optional]\nAn optional label to display for the component in the global selected filters view. This is only applicable if <code class="gatsby-code-text">showFilter</code> is enabled. Default value used here is <code class="gatsby-code-text">componentId</code>.</li>\n<li><strong>URLParams</strong> <code class="gatsby-code-text">Boolean</code> [optional]\nenable creating a URL query string parameter based on the current value of the search. This is useful for sharing URLs with the component state. Defaults to <code class="gatsby-code-text">false</code>.</li>\n<li>\n<p><strong>render</strong> <code class="gatsby-code-text">Function</code> [optional]\nYou can render custom suggestions by using <code class="gatsby-code-text">render</code> prop.\n<br/>\nIt accepts an object with these properties:</p>\n<ul>\n<li><strong><code class="gatsby-code-text">loading</code></strong>: <code class="gatsby-code-text">boolean</code>\nindicates that the query is still in progress</li>\n<li><strong><code class="gatsby-code-text">error</code></strong>: <code class="gatsby-code-text">object</code>\nAn object containing the error info</li>\n<li><strong><code class="gatsby-code-text">data</code></strong>: <code class="gatsby-code-text">array</code>\nAn array of parsed suggestions (original suggestions + category suggestions) obtained from the applied query.</li>\n<li><strong><code class="gatsby-code-text">categories</code></strong>: <code class="gatsby-code-text">array</code>\nAn array of parsed category suggestions.</li>\n<li><strong><code class="gatsby-code-text">rawCategories</code></strong>: <code class="gatsby-code-text">array</code>\nAn array of original category suggestions.</li>\n<li><strong><code class="gatsby-code-text">suggestions</code></strong>: <code class="gatsby-code-text">array</code>\nAn array of parsed suggestions.</li>\n<li><strong><code class="gatsby-code-text">rawSuggestions</code></strong>: <code class="gatsby-code-text">array</code>\nAn array of original suggestions.</li>\n<li><strong><code class="gatsby-code-text">value</code></strong>: <code class="gatsby-code-text">string</code>\ncurrent search input value i.e the search query being used to obtain categories and suggestions.</li>\n<li>\n<p><strong><code class="gatsby-code-text">downshiftProps</code></strong>: <code class="gatsby-code-text">object</code>\nprovides all the control props from <code class="gatsby-code-text">downshift</code> which can be used to bind list items with click/mouse events.\nRead more about it <a href="https://github.com/downshift-js/downshift#children-function">here</a>.</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token operator">&lt;</span>CategorySearch\nrender<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    loading<span class="token punctuation">,</span>\n    error<span class="token punctuation">,</span>\n    value<span class="token punctuation">,</span>\n    categories<span class="token punctuation">,</span>\n    suggestions<span class="token punctuation">,</span>\n    downshiftProps<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        isOpen<span class="token punctuation">,</span>\n        getItemProps<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>loading<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Fetching Suggestions<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n                Something went wrong<span class="token operator">!</span> Error details <span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">}</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n        <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>isOpen <span class="token operator">&amp;&amp;</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n                    <span class="token punctuation">{</span>suggestions<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>suggestion<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n                        <span class="token operator">&lt;</span>div\n                            key<span class="token operator">=</span><span class="token punctuation">{</span>suggestion<span class="token punctuation">.</span>value<span class="token punctuation">}</span>\n                            <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">getItemProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span> item<span class="token punctuation">:</span> suggestion <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n                        <span class="token operator">></span>\n                            <span class="token punctuation">{</span>suggestion<span class="token punctuation">.</span>value<span class="token punctuation">}</span>\n                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n                    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n                    <span class="token punctuation">{</span>categories<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n                        <span class="token operator">&lt;</span>div\n                            key<span class="token operator">=</span><span class="token punctuation">{</span>category<span class="token punctuation">.</span>key<span class="token punctuation">}</span>\n                            <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">getItemProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span> item<span class="token punctuation">:</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> value<span class="token punctuation">,</span> category<span class="token punctuation">:</span> category<span class="token punctuation">.</span>key <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n                        <span class="token operator">></span>\n                            <span class="token punctuation">{</span>value<span class="token punctuation">}</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>category<span class="token punctuation">.</span>key<span class="token punctuation">}</span>\n                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n                    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n                    <span class="token punctuation">{</span><span class="token function">Boolean</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>\n                        <span class="token operator">&lt;</span>div\n                            <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">getItemProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span> item<span class="token punctuation">:</span> <span class="token punctuation">{</span> label<span class="token punctuation">:</span> value<span class="token punctuation">,</span> value<span class="token punctuation">:</span> value <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n                        <span class="token operator">></span>\n                            Search <span class="token keyword">for</span> <span class="token string">"{value}"</span> <span class="token keyword">in</span> all categories\n                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n                    <span class="token punctuation">)</span><span class="token punctuation">}</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\t\t<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span>\n<span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token operator">/</span><span class="token operator">></span></code></pre>\n      </div>\n<p>Or you can also use render function as children</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CategorySearch</span><span class="token punctuation">></span></span>\n<span class="token punctuation">{</span>\n    <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        loading<span class="token punctuation">,</span>\n        error<span class="token punctuation">,</span>\n        data<span class="token punctuation">,</span>\n        categories<span class="token punctuation">,</span>\n        rawCategories<span class="token punctuation">,</span>\n        suggestions<span class="token punctuation">,</span>\n        rawSuggestions\n        value<span class="token punctuation">,</span>\n        downshiftProps\n    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n        <span class="token comment">// return custom suggestions UI to be rendered</span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CategorySearch</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>renderError</strong> <code class="gatsby-code-text">String or JSX or Function</code> [optional]\ncan we used to render an error message in case of any error.</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx">renderError<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n            Something went wrong<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>Error details<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token punctuation">{</span>error<span class="token punctuation">}</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n</li>\n<li>\n<p><strong>renderNoSuggestion</strong> <code class="gatsby-code-text">String or JSX or Function</code> [optional]\ncan we used to render a message when there is no suggestions found.</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx">renderNoSuggestion<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n            No suggestions found\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n</li>\n<li><strong>getMicInstance</strong> <code class="gatsby-code-text">Function</code> [optional]\nYou can pass a callback function to get the instance of <code class="gatsby-code-text">SpeechRecognition</code> object, which can be used to override the default configurations.</li>\n<li>\n<p><strong>renderMic</strong> <code class="gatsby-code-text">String or JSX or Function</code> [optional]\ncan we used to render the custom mic option.<br/>\nIt accepts an object with the following properties:</p>\n<ul>\n<li><strong><code class="gatsby-code-text">handleClick</code></strong>: <code class="gatsby-code-text">function</code>\nneeds to be called when the mic option is clicked.</li>\n<li>\n<p><strong><code class="gatsby-code-text">status</code></strong>: <code class="gatsby-code-text">string</code>\nis a constant which can have one of these values:<br/>\n<code class="gatsby-code-text">INACTIVE</code> - mic is in inactive state i.e not listening<br/>\n<code class="gatsby-code-text">STOPPED</code> - mic has been stopped by the user<br/>\n<code class="gatsby-code-text">ACTIVE</code> - mic is listening<br/>\n<code class="gatsby-code-text">DENIED</code> - permission is not allowed<br/></p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx">renderMic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> handleClick<span class="token punctuation">,</span> status <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">switch</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">case</span> <span class="token string">\'ACTIVE\'</span><span class="token punctuation">:</span>\n\t\t\t\t<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/active_mic.png<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n\t\t\t<span class="token keyword">case</span> <span class="token string">\'DENIED\'</span><span class="token punctuation">:</span>\n\t\t\t<span class="token keyword">case</span> <span class="token string">\'STOPPED\'</span><span class="token punctuation">:</span>\n\t\t\t\t<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/mute_mic.png<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n\t\t\t<span class="token keyword">default</span><span class="token punctuation">:</span>\n\t\t\t\t<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/inactive_mic.png<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n\t\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>\n      </div>\n</li>\n</ul>\n</li>\n<li><strong>onSuggestions</strong> <code class="gatsby-code-text">Function</code> [optional]\nYou can pass a callback function to listen for the changes in suggestions.The function receives <code class="gatsby-code-text">suggestions</code> list.</li>\n<li><strong>onError</strong> <code class="gatsby-code-text">Function</code> [optional]\ngets triggered in case of an error and provides the <code class="gatsby-code-text">error</code> object, which can be used for debugging or giving feedback to the user if needed.</li>\n</ul>\n<h2 id="demo"><a href="#demo" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Demo</h2>\n<br />\n<iframe src="https://codesandbox.io/embed/github/appbaseio/reactivesearch/tree/next/packages/web/examples/CategorySearch" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe>\n<h2 id="styles"><a href="#styles" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Styles</h2>\n<p><code class="gatsby-code-text">CategorySearch</code> component supports <code class="gatsby-code-text">innerClass</code> prop with the following keys:</p>\n<ul>\n<li><code class="gatsby-code-text">title</code></li>\n<li><code class="gatsby-code-text">input</code></li>\n<li><code class="gatsby-code-text">list</code></li>\n<li><code class="gatsby-code-text">mic</code></li>\n</ul>\n<p>Read more about it <a href="/reactive-manual/theming/class.html">here</a>.</p>\n<h2 id="extending"><a href="#extending" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Extending</h2>\n<p><code class="gatsby-code-text">CategorySearch</code> component can be extended to</p>\n<ol>\n<li>customize the look and feel with <code class="gatsby-code-text">className</code>, <code class="gatsby-code-text">style</code>,</li>\n<li>update the underlying DB query with <code class="gatsby-code-text">customQuery</code>,</li>\n<li>connect with external interfaces using <code class="gatsby-code-text">beforeValueChange</code>, <code class="gatsby-code-text">onValueChange</code>, <code class="gatsby-code-text">onValueSelected</code> and <code class="gatsby-code-text">onQueryChange</code>,</li>\n<li>specify how search suggestions should be filtered using <code class="gatsby-code-text">react</code> prop,</li>\n<li>use your own function to render suggestions using <code class="gatsby-code-text">parseSuggestion</code> prop. It expects an object back for each <code class="gatsby-code-text">suggestion</code> having keys <code class="gatsby-code-text">label</code> and <code class="gatsby-code-text">value</code>. The query is run against the <code class="gatsby-code-text">value</code> key and <code class="gatsby-code-text">label</code> is used for rendering the suggestions. <code class="gatsby-code-text">label</code> can be either <code class="gatsby-code-text">String</code> or JSX. For example,</li>\n</ol>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token operator">&lt;</span>CategorySearch\n  <span class="token operator">...</span>\n  parseSuggestion<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>suggestion<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    label<span class="token punctuation">:</span> <span class="token punctuation">(</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n            <span class="token punctuation">{</span>suggestion<span class="token punctuation">.</span>_source<span class="token punctuation">.</span>original_title<span class="token punctuation">}</span> by\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">\'dodgerblue\'</span><span class="token punctuation">,</span> marginLeft<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n                <span class="token punctuation">{</span>suggestion<span class="token punctuation">.</span>_source<span class="token punctuation">.</span>authors<span class="token punctuation">}</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    value<span class="token punctuation">:</span> suggestion<span class="token punctuation">.</span>_source<span class="token punctuation">.</span>original_title<span class="token punctuation">,</span>\n    source<span class="token punctuation">:</span> suggestion<span class="token punctuation">.</span>_source  <span class="token comment">// for onValueSelected to work with parseSuggestion</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n<span class="token operator">/</span><span class="token operator">></span></code></pre>\n      </div>\n<ul>\n<li>\n<p>it’s also possible to take control of rendering individual suggestions with <code class="gatsby-code-text">parseSuggestion</code> prop or the entire suggestions rendering using the <code class="gatsby-code-text">render</code> prop. Check the <a href="/reactive-manual/advanced/customsuggestions.html">custom suggestions</a> recipe for more info.</p>\n</li>\n<li>\n<p>add the following <a href="https://reactjs.org/events.html">synthetic events</a> to the underlying <code class="gatsby-code-text">input</code> element:</p>\n<ul>\n<li>onBlur</li>\n<li>onFocus</li>\n<li>onKeyPress</li>\n<li>onKeyDown</li>\n<li>onKeyUp</li>\n<li>autoFocus</li>\n</ul>\n<blockquote>\n<p>Note:</p>\n<p>All these events accepts the <code class="gatsby-code-text">triggerQuery</code> as a second parameter which can be used to trigger the <code class="gatsby-code-text">CategorySearch</code> query with the current selected value (useful to customize the search query execution).</p>\n</blockquote>\n</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token operator">&lt;</span>CategorySearch\n  <span class="token operator">...</span>\n  className<span class="token operator">=</span><span class="token string">"custom-class"</span>\n  style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">"paddingBottom"</span><span class="token punctuation">:</span> <span class="token string">"10px"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\n  customQuery<span class="token operator">=</span><span class="token punctuation">{</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> props<span class="token punctuation">,</span> category<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        query<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            match<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                data_field<span class="token punctuation">:</span> <span class="token string">"this is a test"</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  beforeValueChange<span class="token operator">=</span><span class="token punctuation">{</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// called before the value is set</span>\n      <span class="token comment">// returns a promise</span>\n      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token comment">// update state or component props</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token comment">// or reject()</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  onValueChange<span class="token operator">=</span><span class="token punctuation">{</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"current value: "</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n      <span class="token comment">// set the state</span>\n      <span class="token comment">// use the value with other js code</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  onValueSelected<span class="token operator">=</span><span class="token punctuation">{</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> category<span class="token punctuation">,</span> cause<span class="token punctuation">,</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"current value and category: "</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> category<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  onQueryChange<span class="token operator">=</span><span class="token punctuation">{</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span>prevQuery<span class="token punctuation">,</span> nextQuery<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// use the query with other js code</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'prevQuery\'</span><span class="token punctuation">,</span> prevQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'nextQuery\'</span><span class="token punctuation">,</span> nextQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// specify how and which suggestions are filtered using `react` prop.</span>\n  react<span class="token operator">=</span><span class="token punctuation">{</span>\n    <span class="token string">"and"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"pricingFilter"</span><span class="token punctuation">,</span> <span class="token string">"dateFilter"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token string">"or"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"searchFilter"</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token operator">/</span><span class="token operator">></span></code></pre>\n      </div>\n<ul>\n<li><strong>className</strong> <code class="gatsby-code-text">String</code>\nCSS class to be injected on the component container.</li>\n<li><strong>style</strong> <code class="gatsby-code-text">Object</code>\nCSS styles to be applied to the <strong>CategorySearch</strong> component.</li>\n<li><strong>customQuery</strong> <code class="gatsby-code-text">Function</code>\ntakes <strong>value</strong>, <strong>props</strong> and <strong>category</strong> as parameters and <strong>returns</strong> the data query to be applied to the component, as defined in Elasticsearch Query DSL.\n<code class="gatsby-code-text">Note:</code> customQuery is called on value changes in the <strong>CategorySearch</strong> component as long as the component is a part of <code class="gatsby-code-text">react</code> dependency of at least one other component.</li>\n<li><strong>defaultQuery</strong> <code class="gatsby-code-text">Function</code>\ntakes <strong>value</strong>, <strong>props</strong> and <strong>category</strong> as parameters and <strong>returns</strong> the data query to be applied to the source component, as defined in Elasticsearch Query DSL, which doesn’t get leaked to other components.<br/>\nRead more about it <a href="/reactive-manual/advanced/customquery.html#when-to-use-default-query">here</a>.</li>\n<li><strong>beforeValueChange</strong> <code class="gatsby-code-text">Function</code>\nis a callback function which accepts component’s future <strong>value</strong> as a parameter and <strong>returns</strong> a promise. It is called everytime before a component’s value changes. The promise, if and when resolved, triggers the execution of the component’s query and if rejected, kills the query execution. This method can act as a gatekeeper for query execution, since it only executes the query after the provided promise has been resolved.</li>\n<li><strong>onValueChange</strong> <code class="gatsby-code-text">Function</code>\nis a callback function which accepts component’s current <strong>value</strong> as a parameter. It is called everytime the component’s value changes. This prop is handy in cases where you want to generate a side-effect on value selection. For example: You want to show a pop-up modal with the valid discount coupon code when a user searches for a product in a CategorySearch.</li>\n<li>\n<p><strong>onValueSelected</strong> <code class="gatsby-code-text">Function</code>\nis called with the value and the category selected via user interaction. If the search was performed by selecting the ‘in all categories’ suggestion, category is received as <code class="gatsby-code-text">*</code>. If it was performed for one of the categorized suggestion, the <code class="gatsby-code-text">category</code> is received. In other cases (either searching without selecting a suggestion or picking an uncategorized suggestion), <code class="gatsby-code-text">category</code> is received as <code class="gatsby-code-text">null</code>. It works only with <code class="gatsby-code-text">autosuggest</code> and is called whenever a suggestion is selected or a search is performed by pressing <strong>enter</strong> key. It also passes the <code class="gatsby-code-text">cause</code> of action and the <code class="gatsby-code-text">source</code> object if the cause of action was <code class="gatsby-code-text">&#39;SUGGESTION_SELECT&#39;</code>. The source would be <code class="gatsby-code-text">null</code> if a category based suggestion was selected. The possible causes are:</p>\n<ul>\n<li><code class="gatsby-code-text">&#39;SUGGESTION_SELECT&#39;</code></li>\n<li><code class="gatsby-code-text">&#39;ENTER_PRESS&#39;</code></li>\n<li>`‘CLEAR_VALUE’</li>\n</ul>\n</li>\n<li><strong>onQueryChange</strong> <code class="gatsby-code-text">Function</code>\nis a callback function which accepts component’s <strong>prevQuery</strong> and <strong>nextQuery</strong> as parameters. It is called everytime the component’s query changes. This prop is handy in cases where you want to generate a side-effect whenever the component’s query would change.</li>\n<li>\n<p><strong>react</strong> <code class="gatsby-code-text">Object</code>\nspecify dependent components to reactively update <strong>CategorySearch’s</strong> suggestions.</p>\n<ul>\n<li>\n<p><strong>key</strong> <code class="gatsby-code-text">String</code>\none of <code class="gatsby-code-text">and</code>, <code class="gatsby-code-text">or</code>, <code class="gatsby-code-text">not</code> defines the combining clause.</p>\n<ul>\n<li><strong>and</strong> clause implies that the results will be filtered by matches from <strong>all</strong> of the associated component states.</li>\n<li><strong>or</strong> clause implies that the results will be filtered by matches from <strong>at least one</strong> of the associated component states.</li>\n<li><strong>not</strong> clause implies that the results will be filtered by an <strong>inverse</strong> match of the associated component states.</li>\n</ul>\n</li>\n<li>\n<p><strong>value</strong> <code class="gatsby-code-text">String or Array or Object</code></p>\n<ul>\n<li><code class="gatsby-code-text">String</code> is used for specifying a single component by its <code class="gatsby-code-text">componentId</code>.</li>\n<li><code class="gatsby-code-text">Array</code> is used for specifying multiple components by their <code class="gatsby-code-text">componentId</code>.</li>\n<li><code class="gatsby-code-text">Object</code> is used for nesting other key clauses.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id="examples"><a href="#examples" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>\n<p><a href="https://opensource.appbase.io/playground/?selectedKind=Search%20components%2FCategorySearch" target="_blank">CategorySearch with default props</a></p>',
frontmatter:{title:"CategorySearch",next:"result-components/reactivelist.html",prev:"search-components/datasearch.html",nextTitle:"Result Components: ResultList",prevTitle:"DataSearch"},fields:{path:"docs/search-components/CategorySearch",slug:"search-components/categorysearch.html"}}},pathContext:{slug:"search-components/categorysearch.html"}}}});
//# sourceMappingURL=path---search-components-categorysearch-html-14c235e277db657e1b85.js.map